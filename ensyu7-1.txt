- - - - - 演習問題7-1 - - - - -

★レンジパーティション
	概要：キー項目の値の範囲（ユーザ指定）でパーティション分割。
	      範囲はSQLのCREATE文+partition by range文で指定できる。
	      ex.) 履歴を蓄積するテーブルを日や月単位で分割するとき。
	利点：特定の範囲のデータのみを選択的に取得できるのでI/Oパフォーマンスが高くなる。
	欠点：範囲で（連続データとして）区切れない種類の値を分割することは難しい
	
★リストパーティション
	概要：キー項目の値が、事前に決まっている複数の値のどれに該当するかで分割する。
	利点：必要最小限のデータのみにアクセスできる。非連続データのパーティションも可能。
	欠点：連続的な値には利用できず、離散的な値のみに利用できること。

★ハッシュパーティション
	概要：キー項目の値から、ユーザが決めた数のパーティションで自動的に(ロジックはユーザが指定できない)均等に割り振る方式。
	      パーティション数はSQLのCREATE文+partition by hash文で指定できる。
	利点：無限ともいえるキー値のレコードを、一定のパーティションサイズごとで均一に均すことができる。
	      キー値の種類が不特定（増減の可能性、範囲で区切れない可能性など）なときでも、
	      割り振りのロジックをOracleに任せられる
	欠点：ハッシュ関数で変換されたハッシュ値は、元の値の順序関係を維持していないランダムな値。
	      →一意検索でしか効力を発揮しない。（ハッシュインデックス同様）
	

- - - - - 演習問題7-2 - - - - -

★マテリアライズドビュー（という機能の名前 / ビューの種類）

データの実体を持ったビュー（仮想テーブル）のこと。
通常のビューは「仮想テーブル」であり、つまり実際のデータを持っていないが、
マテリアライズドビュー（という機能）ではSQLで取得したデータを使い、即席のテーブルを作成できる。

ビューと異なる点はリフレッシュという処理が必要になる点。
※マテリアライズドビューはデータの実体を持つので、
  定期的に最新のデータに更新（リフレッシュという）する必要がある

基本的にマテリアライズドビューはDBMS内で一つのテーブルとして扱われるので、
テーブルにできる操作の大半はマテリアライズドビューにも適用できる。
また、テーブル同然のストレージを食う。
